
uart_handler.elf:     file format elf32-littlenios2
uart_handler.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000df4 memsz 0x00000df4 flags r-x
    LOAD off    0x00001e14 vaddr 0x00004e14 paddr 0x00004f04 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001ff4 vaddr 0x00004ff4 paddr 0x00004ff4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000ddc  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00004dfc  00004dfc  00001dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f0  00004e14  00004f04  00001e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00004ff4  00004ff4  00001ff4  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000228  00000000  00000000  00001f30  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000359  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000032bb  00000000  00000000  000024b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000fd1  00000000  00000000  0000576c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002f35  00000000  00000000  0000673d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000358  00000000  00000000  00009674  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d20  00000000  00000000  000099cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000f8a  00000000  00000000  0000a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000b678  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  0000b688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000c831  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0000c834  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000c840  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000c841  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000005  00000000  00000000  0000c842  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000005  00000000  00000000  0000c847  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000005  00000000  00000000  0000c84c  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  0000c851  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001a  00000000  00000000  0000c859  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00033d0d  00000000  00000000  0000c873  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00004dfc l    d  .rodata	00000000 .rodata
00004e14 l    d  .rwdata	00000000 .rwdata
00004ff4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004224 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00004e14 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004ab8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00004c04 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00004c90 g     F .text	0000002c alt_main
00004f04 g       *ABS*	00000000 __flash_rwdata_start
0000418c g     F .text	00000054 printf
00004efc g     O .rwdata	00000004 rs232
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00004ff4 g     O .bss	00000004 errno
00004ffc g     O .bss	00000004 alt_argv
0000cef4 g       *ABS*	00000000 _gp
000041e0 g     F .text	00000044 _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004bf4 g     F .text	00000008 __udivsi3
00004ef8 g     O .rwdata	00000004 _global_impure_ptr
00005004 g       *ABS*	00000000 __bss_end
0000409c g     F .text	000000a0 ledDemo
00004dec g     F .text	00000004 alt_dcache_flush_all
00004f04 g       *ABS*	00000000 __ram_rwdata_end
00004cbc g     F .text	00000078 write
00004e14 g       *ABS*	00000000 __ram_rodata_end
00004bfc g     F .text	00000008 __umodsi3
00005004 g       *ABS*	00000000 end
00004d58 g     F .text	00000094 altera_avalon_uart_write
00008000 g       *ABS*	00000000 __alt_stack_pointer
000042a4 g     F .text	0000069c ___vfprintf_internal_r
00004020 g     F .text	0000003c _start
00004d34 g     F .text	00000004 alt_sys_init
00004154 g     F .text	00000038 __mulsi3
00004e14 g       *ABS*	00000000 __ram_rwdata_start
00004dfc g       *ABS*	00000000 __ram_rodata_start
00005004 g       *ABS*	00000000 __alt_stack_base
00004964 g     F .text	000000bc __sfvwrite_small_dev
00004ff4 g       *ABS*	00000000 __bss_start
0000413c g     F .text	00000018 main
00005000 g     O .bss	00000004 alt_envp
00004f00 g     O .rwdata	00000004 alt_errno
00004b34 g     F .text	00000060 __divsi3
00004dfc g       *ABS*	00000000 __flash_rodata_start
0000405c g     F .text	00000040 delay
00004d38 g     F .text	00000020 alt_irq_init
00004a40 g     F .text	00000078 _write_r
00004ef4 g     O .rwdata	00000004 _impure_ptr
00004ff8 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004f04 g       *ABS*	00000000 _edata
00005004 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004df4 g     F .text	00000008 altera_nios2_qsys_irq_init
0000400c g       .entry	00000000 exit
00004b94 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00004a20 g     F .text	00000020 strlen
00004df0 g     F .text	00000004 alt_icache_flush_all
00004940 g     F .text	00000024 __vfprintf_internal
00004c24 g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b3bd14 	ori	gp,gp,52980
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1093fd14 	ori	r2,r2,20468

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d40114 	ori	r3,r3,20484

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	0004c240 	call	4c24 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	0004c900 	call	4c90 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <delay>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_uart_regs.h"

void delay(int a){
    405c:	defffe04 	addi	sp,sp,-8
	volatile int i = 0;
	while (i<a*1000000){
    4060:	014003f4 	movhi	r5,15
    4064:	29509004 	addi	r5,r5,16960
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_uart_regs.h"

void delay(int a){
    4068:	dfc00115 	stw	ra,4(sp)
	volatile int i = 0;
    406c:	d8000015 	stw	zero,0(sp)
	while (i<a*1000000){
    4070:	00041540 	call	4154 <__mulsi3>
    4074:	1007883a 	mov	r3,r2
    4078:	00000306 	br	4088 <delay+0x2c>
		i++;
    407c:	d8800017 	ldw	r2,0(sp)
    4080:	10800044 	addi	r2,r2,1
    4084:	d8800015 	stw	r2,0(sp)
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_uart_regs.h"

void delay(int a){
	volatile int i = 0;
	while (i<a*1000000){
    4088:	d8800017 	ldw	r2,0(sp)
    408c:	10fffb16 	blt	r2,r3,407c <delay+0x20>
		i++;
	}
}
    4090:	dfc00117 	ldw	ra,4(sp)
    4094:	dec00204 	addi	sp,sp,8
    4098:	f800283a 	ret

0000409c <ledDemo>:
//blink led

void ledDemo(){
    409c:	defffd04 	addi	sp,sp,-12
    40a0:	dfc00215 	stw	ra,8(sp)
    40a4:	dc400115 	stw	r17,4(sp)
    40a8:	dc000015 	stw	r16,0(sp)
	uint a;
	a = (uint)IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
    40ac:	00a40014 	movui	r2,36864
    40b0:	14000037 	ldwio	r16,0(r2)

	if(a/64 ==1){
    40b4:	04400fc4 	movi	r17,63
    40b8:	80bff004 	addi	r2,r16,-64
    40bc:	88800636 	bltu	r17,r2,40d8 <ledDemo+0x3c>
		IOWR_ALTERA_AVALON_PIO_DATA(BUS1_BASE,a);
    40c0:	00a40814 	movui	r2,36896
    40c4:	14000035 	stwio	r16,0(r2)
		printf("1 get %d\n",a);}
    40c8:	01000034 	movhi	r4,0
    40cc:	21137f04 	addi	r4,r4,19964
    40d0:	800b883a 	mov	r5,r16
    40d4:	000418c0 	call	418c <printf>
	if(a/64 ==2){
    40d8:	80bfe004 	addi	r2,r16,-128
			IOWR_ALTERA_AVALON_PIO_DATA(BUS2_BASE,a);
			printf("1 get %d\n",a);}
	else if(a/64 ==3){
    40dc:	80ffd004 	addi	r3,r16,-192
	a = (uint)IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);

	if(a/64 ==1){
		IOWR_ALTERA_AVALON_PIO_DATA(BUS1_BASE,a);
		printf("1 get %d\n",a);}
	if(a/64 ==2){
    40e0:	88800636 	bltu	r17,r2,40fc <ledDemo+0x60>
			IOWR_ALTERA_AVALON_PIO_DATA(BUS2_BASE,a);
    40e4:	00a40c14 	movui	r2,36912
    40e8:	14000035 	stwio	r16,0(r2)
			printf("1 get %d\n",a);}
    40ec:	800b883a 	mov	r5,r16
    40f0:	01000034 	movhi	r4,0
    40f4:	21137f04 	addi	r4,r4,19964
    40f8:	00000606 	br	4114 <ledDemo+0x78>
	else if(a/64 ==3){
    40fc:	88c00a36 	bltu	r17,r3,4128 <ledDemo+0x8c>
			IOWR_ALTERA_AVALON_PIO_DATA(BUS3_BASE,a);
    4100:	00a41014 	movui	r2,36928
    4104:	14000035 	stwio	r16,0(r2)
			printf("3 get %d\n",a);}
    4108:	800b883a 	mov	r5,r16
    410c:	01000034 	movhi	r4,0
    4110:	21138204 	addi	r4,r4,19976



}
    4114:	dfc00217 	ldw	ra,8(sp)
    4118:	dc400117 	ldw	r17,4(sp)
    411c:	dc000017 	ldw	r16,0(sp)
    4120:	dec00304 	addi	sp,sp,12
	if(a/64 ==2){
			IOWR_ALTERA_AVALON_PIO_DATA(BUS2_BASE,a);
			printf("1 get %d\n",a);}
	else if(a/64 ==3){
			IOWR_ALTERA_AVALON_PIO_DATA(BUS3_BASE,a);
			printf("3 get %d\n",a);}
    4124:	000418c1 	jmpi	418c <printf>



}
    4128:	dfc00217 	ldw	ra,8(sp)
    412c:	dc400117 	ldw	r17,4(sp)
    4130:	dc000017 	ldw	r16,0(sp)
    4134:	dec00304 	addi	sp,sp,12
    4138:	f800283a 	ret

0000413c <main>:

int main(){
    413c:	deffff04 	addi	sp,sp,-4
    4140:	dfc00015 	stw	ra,0(sp)
	//int numb = 10000;
	while(1){

		ledDemo();
    4144:	000409c0 	call	409c <ledDemo>
		delay(1);
    4148:	01000044 	movi	r4,1
    414c:	000405c0 	call	405c <delay>
    4150:	003ffc06 	br	4144 <main+0x8>

00004154 <__mulsi3>:
    4154:	20000a26 	beq	r4,zero,4180 <__mulsi3+0x2c>
    4158:	0007883a 	mov	r3,zero
    415c:	2080004c 	andi	r2,r4,1
    4160:	1005003a 	cmpeq	r2,r2,zero
    4164:	2008d07a 	srli	r4,r4,1
    4168:	1000011e 	bne	r2,zero,4170 <__mulsi3+0x1c>
    416c:	1947883a 	add	r3,r3,r5
    4170:	294b883a 	add	r5,r5,r5
    4174:	203ff91e 	bne	r4,zero,415c <__mulsi3+0x8>
    4178:	1805883a 	mov	r2,r3
    417c:	f800283a 	ret
    4180:	0007883a 	mov	r3,zero
    4184:	1805883a 	mov	r2,r3
    4188:	f800283a 	ret

0000418c <printf>:
    418c:	defffb04 	addi	sp,sp,-20
    4190:	dfc00115 	stw	ra,4(sp)
    4194:	d9400215 	stw	r5,8(sp)
    4198:	d9800315 	stw	r6,12(sp)
    419c:	d9c00415 	stw	r7,16(sp)
    41a0:	00800034 	movhi	r2,0
    41a4:	1093bd04 	addi	r2,r2,20212
    41a8:	11400017 	ldw	r5,0(r2)
    41ac:	d8800204 	addi	r2,sp,8
    41b0:	d8800015 	stw	r2,0(sp)
    41b4:	29c00217 	ldw	r7,8(r5)
    41b8:	100d883a 	mov	r6,r2
    41bc:	00800034 	movhi	r2,0
    41c0:	10925904 	addi	r2,r2,18788
    41c4:	200b883a 	mov	r5,r4
    41c8:	38800115 	stw	r2,4(r7)
    41cc:	3809883a 	mov	r4,r7
    41d0:	00049400 	call	4940 <__vfprintf_internal>
    41d4:	dfc00117 	ldw	ra,4(sp)
    41d8:	dec00504 	addi	sp,sp,20
    41dc:	f800283a 	ret

000041e0 <_printf_r>:
    41e0:	defffc04 	addi	sp,sp,-16
    41e4:	dfc00115 	stw	ra,4(sp)
    41e8:	d9800215 	stw	r6,8(sp)
    41ec:	d9c00315 	stw	r7,12(sp)
    41f0:	22000217 	ldw	r8,8(r4)
    41f4:	d8800204 	addi	r2,sp,8
    41f8:	d8800015 	stw	r2,0(sp)
    41fc:	100f883a 	mov	r7,r2
    4200:	00800034 	movhi	r2,0
    4204:	10925904 	addi	r2,r2,18788
    4208:	280d883a 	mov	r6,r5
    420c:	40800115 	stw	r2,4(r8)
    4210:	400b883a 	mov	r5,r8
    4214:	00042a40 	call	42a4 <___vfprintf_internal_r>
    4218:	dfc00117 	ldw	ra,4(sp)
    421c:	dec00404 	addi	sp,sp,16
    4220:	f800283a 	ret

00004224 <print_repeat>:
    4224:	defffb04 	addi	sp,sp,-20
    4228:	dc800315 	stw	r18,12(sp)
    422c:	dc400215 	stw	r17,8(sp)
    4230:	dc000115 	stw	r16,4(sp)
    4234:	dfc00415 	stw	ra,16(sp)
    4238:	2025883a 	mov	r18,r4
    423c:	2823883a 	mov	r17,r5
    4240:	3821883a 	mov	r16,r7
    4244:	d9800005 	stb	r6,0(sp)
    4248:	9009883a 	mov	r4,r18
    424c:	880b883a 	mov	r5,r17
    4250:	d80d883a 	mov	r6,sp
    4254:	01c00044 	movi	r7,1
    4258:	04000b0e 	bge	zero,r16,4288 <print_repeat+0x64>
    425c:	88c00117 	ldw	r3,4(r17)
    4260:	843fffc4 	addi	r16,r16,-1
    4264:	183ee83a 	callr	r3
    4268:	103ff726 	beq	r2,zero,4248 <print_repeat+0x24>
    426c:	00bfffc4 	movi	r2,-1
    4270:	dfc00417 	ldw	ra,16(sp)
    4274:	dc800317 	ldw	r18,12(sp)
    4278:	dc400217 	ldw	r17,8(sp)
    427c:	dc000117 	ldw	r16,4(sp)
    4280:	dec00504 	addi	sp,sp,20
    4284:	f800283a 	ret
    4288:	0005883a 	mov	r2,zero
    428c:	dfc00417 	ldw	ra,16(sp)
    4290:	dc800317 	ldw	r18,12(sp)
    4294:	dc400217 	ldw	r17,8(sp)
    4298:	dc000117 	ldw	r16,4(sp)
    429c:	dec00504 	addi	sp,sp,20
    42a0:	f800283a 	ret

000042a4 <___vfprintf_internal_r>:
    42a4:	deffe304 	addi	sp,sp,-116
    42a8:	df001b15 	stw	fp,108(sp)
    42ac:	ddc01a15 	stw	r23,104(sp)
    42b0:	dd001715 	stw	r20,92(sp)
    42b4:	dc801515 	stw	r18,84(sp)
    42b8:	dc001315 	stw	r16,76(sp)
    42bc:	dfc01c15 	stw	ra,112(sp)
    42c0:	dd801915 	stw	r22,100(sp)
    42c4:	dd401815 	stw	r21,96(sp)
    42c8:	dcc01615 	stw	r19,88(sp)
    42cc:	dc401415 	stw	r17,80(sp)
    42d0:	d9001015 	stw	r4,64(sp)
    42d4:	2829883a 	mov	r20,r5
    42d8:	d9c01115 	stw	r7,68(sp)
    42dc:	3025883a 	mov	r18,r6
    42e0:	0021883a 	mov	r16,zero
    42e4:	d8000f15 	stw	zero,60(sp)
    42e8:	d8000e15 	stw	zero,56(sp)
    42ec:	0039883a 	mov	fp,zero
    42f0:	d8000915 	stw	zero,36(sp)
    42f4:	d8000d15 	stw	zero,52(sp)
    42f8:	d8000c15 	stw	zero,48(sp)
    42fc:	d8000b15 	stw	zero,44(sp)
    4300:	002f883a 	mov	r23,zero
    4304:	91400003 	ldbu	r5,0(r18)
    4308:	01c00044 	movi	r7,1
    430c:	94800044 	addi	r18,r18,1
    4310:	29003fcc 	andi	r4,r5,255
    4314:	2100201c 	xori	r4,r4,128
    4318:	213fe004 	addi	r4,r4,-128
    431c:	20001526 	beq	r4,zero,4374 <___vfprintf_internal_r+0xd0>
    4320:	81c03526 	beq	r16,r7,43f8 <___vfprintf_internal_r+0x154>
    4324:	3c002016 	blt	r7,r16,43a8 <___vfprintf_internal_r+0x104>
    4328:	803ff61e 	bne	r16,zero,4304 <___vfprintf_internal_r+0x60>
    432c:	00800944 	movi	r2,37
    4330:	2081501e 	bne	r4,r2,4874 <___vfprintf_internal_r+0x5d0>
    4334:	073fffc4 	movi	fp,-1
    4338:	00800284 	movi	r2,10
    433c:	d9c00c15 	stw	r7,48(sp)
    4340:	d8000f15 	stw	zero,60(sp)
    4344:	d8000e15 	stw	zero,56(sp)
    4348:	df000915 	stw	fp,36(sp)
    434c:	d8800d15 	stw	r2,52(sp)
    4350:	d8000b15 	stw	zero,44(sp)
    4354:	91400003 	ldbu	r5,0(r18)
    4358:	3821883a 	mov	r16,r7
    435c:	94800044 	addi	r18,r18,1
    4360:	29003fcc 	andi	r4,r5,255
    4364:	2100201c 	xori	r4,r4,128
    4368:	213fe004 	addi	r4,r4,-128
    436c:	01c00044 	movi	r7,1
    4370:	203feb1e 	bne	r4,zero,4320 <___vfprintf_internal_r+0x7c>
    4374:	b805883a 	mov	r2,r23
    4378:	dfc01c17 	ldw	ra,112(sp)
    437c:	df001b17 	ldw	fp,108(sp)
    4380:	ddc01a17 	ldw	r23,104(sp)
    4384:	dd801917 	ldw	r22,100(sp)
    4388:	dd401817 	ldw	r21,96(sp)
    438c:	dd001717 	ldw	r20,92(sp)
    4390:	dcc01617 	ldw	r19,88(sp)
    4394:	dc801517 	ldw	r18,84(sp)
    4398:	dc401417 	ldw	r17,80(sp)
    439c:	dc001317 	ldw	r16,76(sp)
    43a0:	dec01d04 	addi	sp,sp,116
    43a4:	f800283a 	ret
    43a8:	00800084 	movi	r2,2
    43ac:	80801726 	beq	r16,r2,440c <___vfprintf_internal_r+0x168>
    43b0:	008000c4 	movi	r2,3
    43b4:	80bfd31e 	bne	r16,r2,4304 <___vfprintf_internal_r+0x60>
    43b8:	2c7ff404 	addi	r17,r5,-48
    43bc:	88c03fcc 	andi	r3,r17,255
    43c0:	00800244 	movi	r2,9
    43c4:	10c02136 	bltu	r2,r3,444c <___vfprintf_internal_r+0x1a8>
    43c8:	d8c00917 	ldw	r3,36(sp)
    43cc:	18012716 	blt	r3,zero,486c <___vfprintf_internal_r+0x5c8>
    43d0:	d9000917 	ldw	r4,36(sp)
    43d4:	01400284 	movi	r5,10
    43d8:	00041540 	call	4154 <__mulsi3>
    43dc:	1007883a 	mov	r3,r2
    43e0:	88803fcc 	andi	r2,r17,255
    43e4:	1080201c 	xori	r2,r2,128
    43e8:	10bfe004 	addi	r2,r2,-128
    43ec:	1887883a 	add	r3,r3,r2
    43f0:	d8c00915 	stw	r3,36(sp)
    43f4:	003fc306 	br	4304 <___vfprintf_internal_r+0x60>
    43f8:	00800c04 	movi	r2,48
    43fc:	2080b326 	beq	r4,r2,46cc <___vfprintf_internal_r+0x428>
    4400:	00800944 	movi	r2,37
    4404:	20812726 	beq	r4,r2,48a4 <___vfprintf_internal_r+0x600>
    4408:	04000084 	movi	r16,2
    440c:	2c7ff404 	addi	r17,r5,-48
    4410:	88c03fcc 	andi	r3,r17,255
    4414:	00800244 	movi	r2,9
    4418:	10c00a36 	bltu	r2,r3,4444 <___vfprintf_internal_r+0x1a0>
    441c:	e000b416 	blt	fp,zero,46f0 <___vfprintf_internal_r+0x44c>
    4420:	e009883a 	mov	r4,fp
    4424:	01400284 	movi	r5,10
    4428:	00041540 	call	4154 <__mulsi3>
    442c:	1007883a 	mov	r3,r2
    4430:	88803fcc 	andi	r2,r17,255
    4434:	1080201c 	xori	r2,r2,128
    4438:	10bfe004 	addi	r2,r2,-128
    443c:	18b9883a 	add	fp,r3,r2
    4440:	003fb006 	br	4304 <___vfprintf_internal_r+0x60>
    4444:	00800b84 	movi	r2,46
    4448:	2080a326 	beq	r4,r2,46d8 <___vfprintf_internal_r+0x434>
    444c:	00801b04 	movi	r2,108
    4450:	2080a326 	beq	r4,r2,46e0 <___vfprintf_internal_r+0x43c>
    4454:	d8c00917 	ldw	r3,36(sp)
    4458:	1800a716 	blt	r3,zero,46f8 <___vfprintf_internal_r+0x454>
    445c:	d8000f15 	stw	zero,60(sp)
    4460:	28bfea04 	addi	r2,r5,-88
    4464:	10803fcc 	andi	r2,r2,255
    4468:	00c00804 	movi	r3,32
    446c:	18802836 	bltu	r3,r2,4510 <___vfprintf_internal_r+0x26c>
    4470:	1085883a 	add	r2,r2,r2
    4474:	1085883a 	add	r2,r2,r2
    4478:	00c00034 	movhi	r3,0
    447c:	18d12304 	addi	r3,r3,17548
    4480:	10c5883a 	add	r2,r2,r3
    4484:	11000017 	ldw	r4,0(r2)
    4488:	2000683a 	jmp	r4
    448c:	00004518 	cmpnei	zero,zero,276
    4490:	00004510 	cmplti	zero,zero,276
    4494:	00004510 	cmplti	zero,zero,276
    4498:	00004510 	cmplti	zero,zero,276
    449c:	00004510 	cmplti	zero,zero,276
    44a0:	00004510 	cmplti	zero,zero,276
    44a4:	00004510 	cmplti	zero,zero,276
    44a8:	00004510 	cmplti	zero,zero,276
    44ac:	00004510 	cmplti	zero,zero,276
    44b0:	00004510 	cmplti	zero,zero,276
    44b4:	00004510 	cmplti	zero,zero,276
    44b8:	00004744 	movi	zero,285
    44bc:	0000452c 	andhi	zero,zero,276
    44c0:	00004510 	cmplti	zero,zero,276
    44c4:	00004510 	cmplti	zero,zero,276
    44c8:	00004510 	cmplti	zero,zero,276
    44cc:	00004510 	cmplti	zero,zero,276
    44d0:	0000452c 	andhi	zero,zero,276
    44d4:	00004510 	cmplti	zero,zero,276
    44d8:	00004510 	cmplti	zero,zero,276
    44dc:	00004510 	cmplti	zero,zero,276
    44e0:	00004510 	cmplti	zero,zero,276
    44e4:	00004510 	cmplti	zero,zero,276
    44e8:	000047ac 	andhi	zero,zero,286
    44ec:	00004510 	cmplti	zero,zero,276
    44f0:	00004510 	cmplti	zero,zero,276
    44f4:	00004510 	cmplti	zero,zero,276
    44f8:	000047bc 	xorhi	zero,zero,286
    44fc:	00004510 	cmplti	zero,zero,276
    4500:	00004690 	cmplti	zero,zero,282
    4504:	00004510 	cmplti	zero,zero,276
    4508:	00004510 	cmplti	zero,zero,276
    450c:	00004688 	cmpgei	zero,zero,282
    4510:	0021883a 	mov	r16,zero
    4514:	003f7b06 	br	4304 <___vfprintf_internal_r+0x60>
    4518:	00c00404 	movi	r3,16
    451c:	00800044 	movi	r2,1
    4520:	d8c00d15 	stw	r3,52(sp)
    4524:	d8000c15 	stw	zero,48(sp)
    4528:	d8800b15 	stw	r2,44(sp)
    452c:	d8c00e17 	ldw	r3,56(sp)
    4530:	1805003a 	cmpeq	r2,r3,zero
    4534:	10005a1e 	bne	r2,zero,46a0 <___vfprintf_internal_r+0x3fc>
    4538:	d8800c17 	ldw	r2,48(sp)
    453c:	1000781e 	bne	r2,zero,4720 <___vfprintf_internal_r+0x47c>
    4540:	d8801117 	ldw	r2,68(sp)
    4544:	d8000a15 	stw	zero,40(sp)
    4548:	14400017 	ldw	r17,0(r2)
    454c:	11c00104 	addi	r7,r2,4
    4550:	d9c01115 	stw	r7,68(sp)
    4554:	88005a26 	beq	r17,zero,46c0 <___vfprintf_internal_r+0x41c>
    4558:	d8c00b17 	ldw	r3,44(sp)
    455c:	dcc00044 	addi	r19,sp,1
    4560:	05800244 	movi	r22,9
    4564:	182b003a 	cmpeq	r21,r3,zero
    4568:	dcc01215 	stw	r19,72(sp)
    456c:	00000506 	br	4584 <___vfprintf_internal_r+0x2e0>
    4570:	21000c04 	addi	r4,r4,48
    4574:	99000005 	stb	r4,0(r19)
    4578:	9cc00044 	addi	r19,r19,1
    457c:	80000f26 	beq	r16,zero,45bc <___vfprintf_internal_r+0x318>
    4580:	8023883a 	mov	r17,r16
    4584:	d9400d17 	ldw	r5,52(sp)
    4588:	8809883a 	mov	r4,r17
    458c:	0004bf40 	call	4bf4 <__udivsi3>
    4590:	d9000d17 	ldw	r4,52(sp)
    4594:	100b883a 	mov	r5,r2
    4598:	1021883a 	mov	r16,r2
    459c:	00041540 	call	4154 <__mulsi3>
    45a0:	8889c83a 	sub	r4,r17,r2
    45a4:	b13ff20e 	bge	r22,r4,4570 <___vfprintf_internal_r+0x2cc>
    45a8:	a8009f1e 	bne	r21,zero,4828 <___vfprintf_internal_r+0x584>
    45ac:	21000dc4 	addi	r4,r4,55
    45b0:	99000005 	stb	r4,0(r19)
    45b4:	9cc00044 	addi	r19,r19,1
    45b8:	803ff11e 	bne	r16,zero,4580 <___vfprintf_internal_r+0x2dc>
    45bc:	d8801217 	ldw	r2,72(sp)
    45c0:	98a3c83a 	sub	r17,r19,r2
    45c4:	d8c00917 	ldw	r3,36(sp)
    45c8:	1c4bc83a 	sub	r5,r3,r17
    45cc:	0140130e 	bge	zero,r5,461c <___vfprintf_internal_r+0x378>
    45d0:	d8c00044 	addi	r3,sp,1
    45d4:	18800804 	addi	r2,r3,32
    45d8:	9880102e 	bgeu	r19,r2,461c <___vfprintf_internal_r+0x378>
    45dc:	00800c04 	movi	r2,48
    45e0:	28ffffc4 	addi	r3,r5,-1
    45e4:	98800005 	stb	r2,0(r19)
    45e8:	99000044 	addi	r4,r19,1
    45ec:	00c0080e 	bge	zero,r3,4610 <___vfprintf_internal_r+0x36c>
    45f0:	d8c00044 	addi	r3,sp,1
    45f4:	18800804 	addi	r2,r3,32
    45f8:	2080052e 	bgeu	r4,r2,4610 <___vfprintf_internal_r+0x36c>
    45fc:	00800c04 	movi	r2,48
    4600:	20800005 	stb	r2,0(r4)
    4604:	21000044 	addi	r4,r4,1
    4608:	9945883a 	add	r2,r19,r5
    460c:	20bff81e 	bne	r4,r2,45f0 <___vfprintf_internal_r+0x34c>
    4610:	d8801217 	ldw	r2,72(sp)
    4614:	2027883a 	mov	r19,r4
    4618:	20a3c83a 	sub	r17,r4,r2
    461c:	d8c00a17 	ldw	r3,40(sp)
    4620:	1c45883a 	add	r2,r3,r17
    4624:	e0a1c83a 	sub	r16,fp,r2
    4628:	d8800f17 	ldw	r2,60(sp)
    462c:	10008026 	beq	r2,zero,4830 <___vfprintf_internal_r+0x58c>
    4630:	1805003a 	cmpeq	r2,r3,zero
    4634:	1000ae26 	beq	r2,zero,48f0 <___vfprintf_internal_r+0x64c>
    4638:	0400a516 	blt	zero,r16,48d0 <___vfprintf_internal_r+0x62c>
    463c:	b805883a 	mov	r2,r23
    4640:	0440950e 	bge	zero,r17,4898 <___vfprintf_internal_r+0x5f4>
    4644:	102f883a 	mov	r23,r2
    4648:	1461883a 	add	r16,r2,r17
    464c:	00000206 	br	4658 <___vfprintf_internal_r+0x3b4>
    4650:	bdc00044 	addi	r23,r23,1
    4654:	85ffae26 	beq	r16,r23,4510 <___vfprintf_internal_r+0x26c>
    4658:	9cffffc4 	addi	r19,r19,-1
    465c:	98800003 	ldbu	r2,0(r19)
    4660:	a0c00117 	ldw	r3,4(r20)
    4664:	d9001017 	ldw	r4,64(sp)
    4668:	d8800005 	stb	r2,0(sp)
    466c:	a00b883a 	mov	r5,r20
    4670:	d80d883a 	mov	r6,sp
    4674:	01c00044 	movi	r7,1
    4678:	183ee83a 	callr	r3
    467c:	103ff426 	beq	r2,zero,4650 <___vfprintf_internal_r+0x3ac>
    4680:	05ffffc4 	movi	r23,-1
    4684:	003f3b06 	br	4374 <___vfprintf_internal_r+0xd0>
    4688:	00c00404 	movi	r3,16
    468c:	d8c00d15 	stw	r3,52(sp)
    4690:	d8000c15 	stw	zero,48(sp)
    4694:	d8c00e17 	ldw	r3,56(sp)
    4698:	1805003a 	cmpeq	r2,r3,zero
    469c:	103fa626 	beq	r2,zero,4538 <___vfprintf_internal_r+0x294>
    46a0:	d8c00c17 	ldw	r3,48(sp)
    46a4:	1800171e 	bne	r3,zero,4704 <___vfprintf_internal_r+0x460>
    46a8:	d8c01117 	ldw	r3,68(sp)
    46ac:	d8000a15 	stw	zero,40(sp)
    46b0:	1c400017 	ldw	r17,0(r3)
    46b4:	19c00104 	addi	r7,r3,4
    46b8:	d9c01115 	stw	r7,68(sp)
    46bc:	883fa61e 	bne	r17,zero,4558 <___vfprintf_internal_r+0x2b4>
    46c0:	dcc00044 	addi	r19,sp,1
    46c4:	dcc01215 	stw	r19,72(sp)
    46c8:	003fbe06 	br	45c4 <___vfprintf_internal_r+0x320>
    46cc:	04000084 	movi	r16,2
    46d0:	d9c00f15 	stw	r7,60(sp)
    46d4:	003f0b06 	br	4304 <___vfprintf_internal_r+0x60>
    46d8:	040000c4 	movi	r16,3
    46dc:	003f0906 	br	4304 <___vfprintf_internal_r+0x60>
    46e0:	00800044 	movi	r2,1
    46e4:	040000c4 	movi	r16,3
    46e8:	d8800e15 	stw	r2,56(sp)
    46ec:	003f0506 	br	4304 <___vfprintf_internal_r+0x60>
    46f0:	0007883a 	mov	r3,zero
    46f4:	003f4e06 	br	4430 <___vfprintf_internal_r+0x18c>
    46f8:	00800044 	movi	r2,1
    46fc:	d8800915 	stw	r2,36(sp)
    4700:	003f5706 	br	4460 <___vfprintf_internal_r+0x1bc>
    4704:	d8801117 	ldw	r2,68(sp)
    4708:	14400017 	ldw	r17,0(r2)
    470c:	10800104 	addi	r2,r2,4
    4710:	d8801115 	stw	r2,68(sp)
    4714:	88000716 	blt	r17,zero,4734 <___vfprintf_internal_r+0x490>
    4718:	d8000a15 	stw	zero,40(sp)
    471c:	003f8d06 	br	4554 <___vfprintf_internal_r+0x2b0>
    4720:	d8c01117 	ldw	r3,68(sp)
    4724:	1c400017 	ldw	r17,0(r3)
    4728:	18c00104 	addi	r3,r3,4
    472c:	d8c01115 	stw	r3,68(sp)
    4730:	883ff90e 	bge	r17,zero,4718 <___vfprintf_internal_r+0x474>
    4734:	00800044 	movi	r2,1
    4738:	0463c83a 	sub	r17,zero,r17
    473c:	d8800a15 	stw	r2,40(sp)
    4740:	003f8406 	br	4554 <___vfprintf_internal_r+0x2b0>
    4744:	04000044 	movi	r16,1
    4748:	8700080e 	bge	r16,fp,476c <___vfprintf_internal_r+0x4c8>
    474c:	d9001017 	ldw	r4,64(sp)
    4750:	a00b883a 	mov	r5,r20
    4754:	01800804 	movi	r6,32
    4758:	e1ffffc4 	addi	r7,fp,-1
    475c:	00042240 	call	4224 <print_repeat>
    4760:	103fc71e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    4764:	e5c5883a 	add	r2,fp,r23
    4768:	15ffffc4 	addi	r23,r2,-1
    476c:	d8c01117 	ldw	r3,68(sp)
    4770:	d9001017 	ldw	r4,64(sp)
    4774:	800f883a 	mov	r7,r16
    4778:	18800017 	ldw	r2,0(r3)
    477c:	a0c00117 	ldw	r3,4(r20)
    4780:	a00b883a 	mov	r5,r20
    4784:	d8800005 	stb	r2,0(sp)
    4788:	d80d883a 	mov	r6,sp
    478c:	183ee83a 	callr	r3
    4790:	103fbb1e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    4794:	d8801117 	ldw	r2,68(sp)
    4798:	bdc00044 	addi	r23,r23,1
    479c:	0021883a 	mov	r16,zero
    47a0:	10800104 	addi	r2,r2,4
    47a4:	d8801115 	stw	r2,68(sp)
    47a8:	003ed606 	br	4304 <___vfprintf_internal_r+0x60>
    47ac:	00800204 	movi	r2,8
    47b0:	d8800d15 	stw	r2,52(sp)
    47b4:	d8000c15 	stw	zero,48(sp)
    47b8:	003fb606 	br	4694 <___vfprintf_internal_r+0x3f0>
    47bc:	d8c01117 	ldw	r3,68(sp)
    47c0:	1cc00017 	ldw	r19,0(r3)
    47c4:	9809883a 	mov	r4,r19
    47c8:	0004a200 	call	4a20 <strlen>
    47cc:	e0a1c83a 	sub	r16,fp,r2
    47d0:	1023883a 	mov	r17,r2
    47d4:	0400070e 	bge	zero,r16,47f4 <___vfprintf_internal_r+0x550>
    47d8:	d9001017 	ldw	r4,64(sp)
    47dc:	a00b883a 	mov	r5,r20
    47e0:	01800804 	movi	r6,32
    47e4:	800f883a 	mov	r7,r16
    47e8:	00042240 	call	4224 <print_repeat>
    47ec:	103fa41e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    47f0:	bc2f883a 	add	r23,r23,r16
    47f4:	a0c00117 	ldw	r3,4(r20)
    47f8:	d9001017 	ldw	r4,64(sp)
    47fc:	980d883a 	mov	r6,r19
    4800:	a00b883a 	mov	r5,r20
    4804:	880f883a 	mov	r7,r17
    4808:	183ee83a 	callr	r3
    480c:	103f9c1e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    4810:	d8801117 	ldw	r2,68(sp)
    4814:	bc6f883a 	add	r23,r23,r17
    4818:	0021883a 	mov	r16,zero
    481c:	10800104 	addi	r2,r2,4
    4820:	d8801115 	stw	r2,68(sp)
    4824:	003eb706 	br	4304 <___vfprintf_internal_r+0x60>
    4828:	210015c4 	addi	r4,r4,87
    482c:	003f5106 	br	4574 <___vfprintf_internal_r+0x2d0>
    4830:	04003b16 	blt	zero,r16,4920 <___vfprintf_internal_r+0x67c>
    4834:	d8c00a17 	ldw	r3,40(sp)
    4838:	1805003a 	cmpeq	r2,r3,zero
    483c:	103f7f1e 	bne	r2,zero,463c <___vfprintf_internal_r+0x398>
    4840:	a0c00117 	ldw	r3,4(r20)
    4844:	d9001017 	ldw	r4,64(sp)
    4848:	00800b44 	movi	r2,45
    484c:	d8800005 	stb	r2,0(sp)
    4850:	a00b883a 	mov	r5,r20
    4854:	d80d883a 	mov	r6,sp
    4858:	01c00044 	movi	r7,1
    485c:	183ee83a 	callr	r3
    4860:	103f871e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    4864:	b8800044 	addi	r2,r23,1
    4868:	003f7506 	br	4640 <___vfprintf_internal_r+0x39c>
    486c:	0007883a 	mov	r3,zero
    4870:	003edb06 	br	43e0 <___vfprintf_internal_r+0x13c>
    4874:	a0c00117 	ldw	r3,4(r20)
    4878:	d9001017 	ldw	r4,64(sp)
    487c:	d9400005 	stb	r5,0(sp)
    4880:	d80d883a 	mov	r6,sp
    4884:	a00b883a 	mov	r5,r20
    4888:	183ee83a 	callr	r3
    488c:	103f7c1e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    4890:	bdc00044 	addi	r23,r23,1
    4894:	003e9b06 	br	4304 <___vfprintf_internal_r+0x60>
    4898:	102f883a 	mov	r23,r2
    489c:	0021883a 	mov	r16,zero
    48a0:	003e9806 	br	4304 <___vfprintf_internal_r+0x60>
    48a4:	a0c00117 	ldw	r3,4(r20)
    48a8:	d9000005 	stb	r4,0(sp)
    48ac:	d9001017 	ldw	r4,64(sp)
    48b0:	a00b883a 	mov	r5,r20
    48b4:	d80d883a 	mov	r6,sp
    48b8:	800f883a 	mov	r7,r16
    48bc:	183ee83a 	callr	r3
    48c0:	103f6f1e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    48c4:	bc2f883a 	add	r23,r23,r16
    48c8:	0021883a 	mov	r16,zero
    48cc:	003e8d06 	br	4304 <___vfprintf_internal_r+0x60>
    48d0:	d9001017 	ldw	r4,64(sp)
    48d4:	a00b883a 	mov	r5,r20
    48d8:	01800c04 	movi	r6,48
    48dc:	800f883a 	mov	r7,r16
    48e0:	00042240 	call	4224 <print_repeat>
    48e4:	103f661e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    48e8:	bc05883a 	add	r2,r23,r16
    48ec:	003f5406 	br	4640 <___vfprintf_internal_r+0x39c>
    48f0:	a0c00117 	ldw	r3,4(r20)
    48f4:	d9001017 	ldw	r4,64(sp)
    48f8:	00800b44 	movi	r2,45
    48fc:	d8800005 	stb	r2,0(sp)
    4900:	a00b883a 	mov	r5,r20
    4904:	d80d883a 	mov	r6,sp
    4908:	01c00044 	movi	r7,1
    490c:	183ee83a 	callr	r3
    4910:	103f5b1e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    4914:	bdc00044 	addi	r23,r23,1
    4918:	043f480e 	bge	zero,r16,463c <___vfprintf_internal_r+0x398>
    491c:	003fec06 	br	48d0 <___vfprintf_internal_r+0x62c>
    4920:	d9001017 	ldw	r4,64(sp)
    4924:	a00b883a 	mov	r5,r20
    4928:	01800804 	movi	r6,32
    492c:	800f883a 	mov	r7,r16
    4930:	00042240 	call	4224 <print_repeat>
    4934:	103f521e 	bne	r2,zero,4680 <___vfprintf_internal_r+0x3dc>
    4938:	bc2f883a 	add	r23,r23,r16
    493c:	003fbd06 	br	4834 <___vfprintf_internal_r+0x590>

00004940 <__vfprintf_internal>:
    4940:	00800034 	movhi	r2,0
    4944:	1093bd04 	addi	r2,r2,20212
    4948:	2013883a 	mov	r9,r4
    494c:	11000017 	ldw	r4,0(r2)
    4950:	2805883a 	mov	r2,r5
    4954:	300f883a 	mov	r7,r6
    4958:	480b883a 	mov	r5,r9
    495c:	100d883a 	mov	r6,r2
    4960:	00042a41 	jmpi	42a4 <___vfprintf_internal_r>

00004964 <__sfvwrite_small_dev>:
    4964:	2880000b 	ldhu	r2,0(r5)
    4968:	defffa04 	addi	sp,sp,-24
    496c:	dcc00315 	stw	r19,12(sp)
    4970:	1080020c 	andi	r2,r2,8
    4974:	dc800215 	stw	r18,8(sp)
    4978:	dc400115 	stw	r17,4(sp)
    497c:	dfc00515 	stw	ra,20(sp)
    4980:	dd000415 	stw	r20,16(sp)
    4984:	dc000015 	stw	r16,0(sp)
    4988:	2825883a 	mov	r18,r5
    498c:	2027883a 	mov	r19,r4
    4990:	3023883a 	mov	r17,r6
    4994:	10002026 	beq	r2,zero,4a18 <__sfvwrite_small_dev+0xb4>
    4998:	2940008f 	ldh	r5,2(r5)
    499c:	28000f16 	blt	r5,zero,49dc <__sfvwrite_small_dev+0x78>
    49a0:	01c01b0e 	bge	zero,r7,4a10 <__sfvwrite_small_dev+0xac>
    49a4:	3821883a 	mov	r16,r7
    49a8:	05010004 	movi	r20,1024
    49ac:	00000206 	br	49b8 <__sfvwrite_small_dev+0x54>
    49b0:	0400170e 	bge	zero,r16,4a10 <__sfvwrite_small_dev+0xac>
    49b4:	9140008f 	ldh	r5,2(r18)
    49b8:	880d883a 	mov	r6,r17
    49bc:	9809883a 	mov	r4,r19
    49c0:	800f883a 	mov	r7,r16
    49c4:	a400010e 	bge	r20,r16,49cc <__sfvwrite_small_dev+0x68>
    49c8:	01c10004 	movi	r7,1024
    49cc:	0004a400 	call	4a40 <_write_r>
    49d0:	88a3883a 	add	r17,r17,r2
    49d4:	80a1c83a 	sub	r16,r16,r2
    49d8:	00bff516 	blt	zero,r2,49b0 <__sfvwrite_small_dev+0x4c>
    49dc:	9080000b 	ldhu	r2,0(r18)
    49e0:	00ffffc4 	movi	r3,-1
    49e4:	10801014 	ori	r2,r2,64
    49e8:	9080000d 	sth	r2,0(r18)
    49ec:	1805883a 	mov	r2,r3
    49f0:	dfc00517 	ldw	ra,20(sp)
    49f4:	dd000417 	ldw	r20,16(sp)
    49f8:	dcc00317 	ldw	r19,12(sp)
    49fc:	dc800217 	ldw	r18,8(sp)
    4a00:	dc400117 	ldw	r17,4(sp)
    4a04:	dc000017 	ldw	r16,0(sp)
    4a08:	dec00604 	addi	sp,sp,24
    4a0c:	f800283a 	ret
    4a10:	0007883a 	mov	r3,zero
    4a14:	003ff506 	br	49ec <__sfvwrite_small_dev+0x88>
    4a18:	00ffffc4 	movi	r3,-1
    4a1c:	003ff306 	br	49ec <__sfvwrite_small_dev+0x88>

00004a20 <strlen>:
    4a20:	20800007 	ldb	r2,0(r4)
    4a24:	10000526 	beq	r2,zero,4a3c <strlen+0x1c>
    4a28:	2007883a 	mov	r3,r4
    4a2c:	18c00044 	addi	r3,r3,1
    4a30:	18800007 	ldb	r2,0(r3)
    4a34:	103ffd1e 	bne	r2,zero,4a2c <strlen+0xc>
    4a38:	1905c83a 	sub	r2,r3,r4
    4a3c:	f800283a 	ret

00004a40 <_write_r>:
    4a40:	defffd04 	addi	sp,sp,-12
    4a44:	dc000015 	stw	r16,0(sp)
    4a48:	04000034 	movhi	r16,0
    4a4c:	8413fd04 	addi	r16,r16,20468
    4a50:	dc400115 	stw	r17,4(sp)
    4a54:	80000015 	stw	zero,0(r16)
    4a58:	2023883a 	mov	r17,r4
    4a5c:	2809883a 	mov	r4,r5
    4a60:	300b883a 	mov	r5,r6
    4a64:	380d883a 	mov	r6,r7
    4a68:	dfc00215 	stw	ra,8(sp)
    4a6c:	0004cbc0 	call	4cbc <write>
    4a70:	1007883a 	mov	r3,r2
    4a74:	00bfffc4 	movi	r2,-1
    4a78:	18800626 	beq	r3,r2,4a94 <_write_r+0x54>
    4a7c:	1805883a 	mov	r2,r3
    4a80:	dfc00217 	ldw	ra,8(sp)
    4a84:	dc400117 	ldw	r17,4(sp)
    4a88:	dc000017 	ldw	r16,0(sp)
    4a8c:	dec00304 	addi	sp,sp,12
    4a90:	f800283a 	ret
    4a94:	80800017 	ldw	r2,0(r16)
    4a98:	103ff826 	beq	r2,zero,4a7c <_write_r+0x3c>
    4a9c:	88800015 	stw	r2,0(r17)
    4aa0:	1805883a 	mov	r2,r3
    4aa4:	dfc00217 	ldw	ra,8(sp)
    4aa8:	dc400117 	ldw	r17,4(sp)
    4aac:	dc000017 	ldw	r16,0(sp)
    4ab0:	dec00304 	addi	sp,sp,12
    4ab4:	f800283a 	ret

00004ab8 <udivmodsi4>:
    4ab8:	29001b2e 	bgeu	r5,r4,4b28 <udivmodsi4+0x70>
    4abc:	28001a16 	blt	r5,zero,4b28 <udivmodsi4+0x70>
    4ac0:	00800044 	movi	r2,1
    4ac4:	0007883a 	mov	r3,zero
    4ac8:	01c007c4 	movi	r7,31
    4acc:	00000306 	br	4adc <udivmodsi4+0x24>
    4ad0:	19c01326 	beq	r3,r7,4b20 <udivmodsi4+0x68>
    4ad4:	18c00044 	addi	r3,r3,1
    4ad8:	28000416 	blt	r5,zero,4aec <udivmodsi4+0x34>
    4adc:	294b883a 	add	r5,r5,r5
    4ae0:	1085883a 	add	r2,r2,r2
    4ae4:	293ffa36 	bltu	r5,r4,4ad0 <udivmodsi4+0x18>
    4ae8:	10000d26 	beq	r2,zero,4b20 <udivmodsi4+0x68>
    4aec:	0007883a 	mov	r3,zero
    4af0:	21400236 	bltu	r4,r5,4afc <udivmodsi4+0x44>
    4af4:	2149c83a 	sub	r4,r4,r5
    4af8:	1886b03a 	or	r3,r3,r2
    4afc:	1004d07a 	srli	r2,r2,1
    4b00:	280ad07a 	srli	r5,r5,1
    4b04:	103ffa1e 	bne	r2,zero,4af0 <udivmodsi4+0x38>
    4b08:	30000226 	beq	r6,zero,4b14 <udivmodsi4+0x5c>
    4b0c:	2005883a 	mov	r2,r4
    4b10:	f800283a 	ret
    4b14:	1809883a 	mov	r4,r3
    4b18:	2005883a 	mov	r2,r4
    4b1c:	f800283a 	ret
    4b20:	0007883a 	mov	r3,zero
    4b24:	003ff806 	br	4b08 <udivmodsi4+0x50>
    4b28:	00800044 	movi	r2,1
    4b2c:	0007883a 	mov	r3,zero
    4b30:	003fef06 	br	4af0 <udivmodsi4+0x38>

00004b34 <__divsi3>:
    4b34:	defffe04 	addi	sp,sp,-8
    4b38:	dc000015 	stw	r16,0(sp)
    4b3c:	dfc00115 	stw	ra,4(sp)
    4b40:	0021883a 	mov	r16,zero
    4b44:	20000c16 	blt	r4,zero,4b78 <__divsi3+0x44>
    4b48:	000d883a 	mov	r6,zero
    4b4c:	28000e16 	blt	r5,zero,4b88 <__divsi3+0x54>
    4b50:	0004ab80 	call	4ab8 <udivmodsi4>
    4b54:	1007883a 	mov	r3,r2
    4b58:	8005003a 	cmpeq	r2,r16,zero
    4b5c:	1000011e 	bne	r2,zero,4b64 <__divsi3+0x30>
    4b60:	00c7c83a 	sub	r3,zero,r3
    4b64:	1805883a 	mov	r2,r3
    4b68:	dfc00117 	ldw	ra,4(sp)
    4b6c:	dc000017 	ldw	r16,0(sp)
    4b70:	dec00204 	addi	sp,sp,8
    4b74:	f800283a 	ret
    4b78:	0109c83a 	sub	r4,zero,r4
    4b7c:	04000044 	movi	r16,1
    4b80:	000d883a 	mov	r6,zero
    4b84:	283ff20e 	bge	r5,zero,4b50 <__divsi3+0x1c>
    4b88:	014bc83a 	sub	r5,zero,r5
    4b8c:	8021003a 	cmpeq	r16,r16,zero
    4b90:	003fef06 	br	4b50 <__divsi3+0x1c>

00004b94 <__modsi3>:
    4b94:	deffff04 	addi	sp,sp,-4
    4b98:	dfc00015 	stw	ra,0(sp)
    4b9c:	01800044 	movi	r6,1
    4ba0:	2807883a 	mov	r3,r5
    4ba4:	20000416 	blt	r4,zero,4bb8 <__modsi3+0x24>
    4ba8:	28000c16 	blt	r5,zero,4bdc <__modsi3+0x48>
    4bac:	dfc00017 	ldw	ra,0(sp)
    4bb0:	dec00104 	addi	sp,sp,4
    4bb4:	0004ab81 	jmpi	4ab8 <udivmodsi4>
    4bb8:	0109c83a 	sub	r4,zero,r4
    4bbc:	28000b16 	blt	r5,zero,4bec <__modsi3+0x58>
    4bc0:	180b883a 	mov	r5,r3
    4bc4:	01800044 	movi	r6,1
    4bc8:	0004ab80 	call	4ab8 <udivmodsi4>
    4bcc:	0085c83a 	sub	r2,zero,r2
    4bd0:	dfc00017 	ldw	ra,0(sp)
    4bd4:	dec00104 	addi	sp,sp,4
    4bd8:	f800283a 	ret
    4bdc:	014bc83a 	sub	r5,zero,r5
    4be0:	dfc00017 	ldw	ra,0(sp)
    4be4:	dec00104 	addi	sp,sp,4
    4be8:	0004ab81 	jmpi	4ab8 <udivmodsi4>
    4bec:	0147c83a 	sub	r3,zero,r5
    4bf0:	003ff306 	br	4bc0 <__modsi3+0x2c>

00004bf4 <__udivsi3>:
    4bf4:	000d883a 	mov	r6,zero
    4bf8:	0004ab81 	jmpi	4ab8 <udivmodsi4>

00004bfc <__umodsi3>:
    4bfc:	01800044 	movi	r6,1
    4c00:	0004ab81 	jmpi	4ab8 <udivmodsi4>

00004c04 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4c04:	2900051e 	bne	r5,r4,4c1c <alt_load_section+0x18>
    4c08:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    4c0c:	20800017 	ldw	r2,0(r4)
    4c10:	21000104 	addi	r4,r4,4
    4c14:	28800015 	stw	r2,0(r5)
    4c18:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4c1c:	29bffb1e 	bne	r5,r6,4c0c <alt_load_section+0x8>
    4c20:	f800283a 	ret

00004c24 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4c24:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4c28:	01000034 	movhi	r4,0
    4c2c:	2113c104 	addi	r4,r4,20228
    4c30:	01400034 	movhi	r5,0
    4c34:	29538504 	addi	r5,r5,19988
    4c38:	01800034 	movhi	r6,0
    4c3c:	3193c104 	addi	r6,r6,20228
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4c40:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4c44:	0004c040 	call	4c04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4c48:	01000034 	movhi	r4,0
    4c4c:	21100804 	addi	r4,r4,16416
    4c50:	01400034 	movhi	r5,0
    4c54:	29500804 	addi	r5,r5,16416
    4c58:	01800034 	movhi	r6,0
    4c5c:	31900804 	addi	r6,r6,16416
    4c60:	0004c040 	call	4c04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4c64:	01000034 	movhi	r4,0
    4c68:	21137f04 	addi	r4,r4,19964
    4c6c:	01400034 	movhi	r5,0
    4c70:	29537f04 	addi	r5,r5,19964
    4c74:	01800034 	movhi	r6,0
    4c78:	31938504 	addi	r6,r6,19988
    4c7c:	0004c040 	call	4c04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4c80:	0004dec0 	call	4dec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4c84:	dfc00017 	ldw	ra,0(sp)
    4c88:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4c8c:	0004df01 	jmpi	4df0 <alt_icache_flush_all>

00004c90 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4c90:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4c94:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4c98:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4c9c:	0004d380 	call	4d38 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4ca0:	0004d340 	call	4d34 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4ca4:	d1204117 	ldw	r4,-32508(gp)
    4ca8:	d1604217 	ldw	r5,-32504(gp)
    4cac:	d1a04317 	ldw	r6,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4cb0:	dfc00017 	ldw	ra,0(sp)
    4cb4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4cb8:	000413c1 	jmpi	413c <main>

00004cbc <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4cbc:	deffff04 	addi	sp,sp,-4
    4cc0:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    4cc4:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4cc8:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    4ccc:	000f883a 	mov	r7,zero
    4cd0:	01000034 	movhi	r4,0
    4cd4:	2113bf04 	addi	r4,r4,20220
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    4cd8:	18800526 	beq	r3,r2,4cf0 <write+0x34>
    4cdc:	00800084 	movi	r2,2
    4ce0:	1880061e 	bne	r3,r2,4cfc <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    4ce4:	01000034 	movhi	r4,0
    4ce8:	2113bf04 	addi	r4,r4,20220
    4cec:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    4cf0:	dfc00017 	ldw	ra,0(sp)
    4cf4:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    4cf8:	0004d581 	jmpi	4d58 <altera_avalon_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4cfc:	00800034 	movhi	r2,0
    4d00:	1093c004 	addi	r2,r2,20224
    4d04:	10800017 	ldw	r2,0(r2)
    4d08:	00c00034 	movhi	r3,0
    4d0c:	18d3fd04 	addi	r3,r3,20468
    4d10:	10000226 	beq	r2,zero,4d1c <write+0x60>
    4d14:	103ee83a 	callr	r2
    4d18:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    4d1c:	00801444 	movi	r2,81
    4d20:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
    4d24:	00bfffc4 	movi	r2,-1
    4d28:	dfc00017 	ldw	ra,0(sp)
    4d2c:	dec00104 	addi	sp,sp,4
    4d30:	f800283a 	ret

00004d34 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_UART_INIT ( RS232, rs232);
}
    4d34:	f800283a 	ret

00004d38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4d38:	deffff04 	addi	sp,sp,-4
    4d3c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    4d40:	0004df40 	call	4df4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4d44:	00800044 	movi	r2,1
    4d48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4d4c:	dfc00017 	ldw	ra,0(sp)
    4d50:	dec00104 	addi	sp,sp,4
    4d54:	f800283a 	ret

00004d58 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    4d58:	defffd04 	addi	sp,sp,-12
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    4d5c:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    4d60:	dc400115 	stw	r17,4(sp)
    4d64:	dc000015 	stw	r16,0(sp)
    4d68:	dfc00215 	stw	ra,8(sp)
    4d6c:	3023883a 	mov	r17,r6
    4d70:	380ec03a 	cmpne	r7,r7,zero
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    4d74:	3021883a 	mov	r16,r6
  count = len;

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    4d78:	20c00017 	ldw	r3,0(r4)
    4d7c:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    4d80:	1080100c 	andi	r2,r2,64
    4d84:	10000426 	beq	r2,zero,4d98 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    4d88:	28800007 	ldb	r2,0(r5)
    4d8c:	29400044 	addi	r5,r5,1
    4d90:	18800135 	stwio	r2,4(r3)
      count--;
    4d94:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
    4d98:	3800021e 	bne	r7,zero,4da4 <altera_avalon_uart_write+0x4c>
    4d9c:	80000d26 	beq	r16,zero,4dd4 <altera_avalon_uart_write+0x7c>
    4da0:	003ff506 	br	4d78 <altera_avalon_uart_write+0x20>

  if (count)
    4da4:	80000b26 	beq	r16,zero,4dd4 <altera_avalon_uart_write+0x7c>
    4da8:	00800034 	movhi	r2,0
    4dac:	1093c004 	addi	r2,r2,20224
    4db0:	10800017 	ldw	r2,0(r2)
    4db4:	1000031e 	bne	r2,zero,4dc4 <altera_avalon_uart_write+0x6c>
    4db8:	00c00034 	movhi	r3,0
    4dbc:	18d3fd04 	addi	r3,r3,20468
    4dc0:	00000206 	br	4dcc <altera_avalon_uart_write+0x74>
    4dc4:	103ee83a 	callr	r2
    4dc8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EWOULDBLOCK;
    4dcc:	008002c4 	movi	r2,11
    4dd0:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
}
    4dd4:	8c05c83a 	sub	r2,r17,r16
    4dd8:	dfc00217 	ldw	ra,8(sp)
    4ddc:	dc400117 	ldw	r17,4(sp)
    4de0:	dc000017 	ldw	r16,0(sp)
    4de4:	dec00304 	addi	sp,sp,12
    4de8:	f800283a 	ret

00004dec <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4dec:	f800283a 	ret

00004df0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4df0:	f800283a 	ret

00004df4 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4df4:	000170fa 	wrctl	ienable,zero
}
    4df8:	f800283a 	ret
